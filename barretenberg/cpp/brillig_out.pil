namespace main(256);
pol commit XInv;
pol commit XIsZero;
XIsZero = (1 - (X * XInv));
(XIsZero * X) = 0;
(XIsZero * (1 - XIsZero)) = 0;
pol commit m_addr;
pol commit m_step;
pol commit m_change;
pol commit m_value;
pol commit m_op;
pol commit m_is_write;
pol commit m_is_read;
pol constant POSITIVE(i) { (i + 1) };
pol constant FIRST = [1] + [0]*;
pol constant LAST(i) { FIRST((i + 1)) };
pol constant STEP(i) { i };
(m_change * (1 - m_change)) = 0;
((m_addr' - m_addr) * (1 - m_change)) = 0;
(1 - LAST) { ((m_change * (m_addr' - m_addr)) + ((1 - m_change) * (m_step' - m_step))) } in { POSITIVE };
(m_op * (1 - m_op)) = 0;
(m_is_write * (1 - m_is_write)) = 0;
(m_is_read * (1 - m_is_read)) = 0;
(m_is_write * (1 - m_op)) = 0;
(m_is_read * (1 - m_op)) = 0;
(m_is_read * m_is_write) = 0;
(((1 - m_is_write') * (1 - m_change)) * (m_value' - m_value)) = 0;
(((1 - m_is_write') * m_change) * m_value') = 0;
pol commit _operation_id;
pol commit _sigma;
pol constant _romgen_first_step = [1] + [0]*;
_sigma' = ((1 - _romgen_first_step') * (_sigma + instr_return));
(_sigma * (_operation_id - 8)) = 0;
pol commit pc;
pol commit X;
pol commit Y;
pol commit Z;
pol commit reg_write_X_jump_ptr;
pol commit reg_write_Y_jump_ptr;
pol commit reg_write_Z_jump_ptr;
pol commit jump_ptr;
pol commit reg_write_X_addr;
pol commit reg_write_Y_addr;
pol commit reg_write_Z_addr;
pol commit addr;
pol commit reg_write_X_tmp;
pol commit reg_write_Y_tmp;
pol commit reg_write_Z_tmp;
pol commit tmp;
pol commit reg_write_X_r0;
pol commit reg_write_Y_r0;
pol commit reg_write_Z_r0;
pol commit r0;
pol commit reg_write_X_r1;
pol commit reg_write_Y_r1;
pol commit reg_write_Z_r1;
pol commit r1;
pol commit reg_write_X_r2;
pol commit reg_write_Y_r2;
pol commit reg_write_Z_r2;
pol commit r2;
pol commit reg_write_X_r3;
pol commit reg_write_Y_r3;
pol commit reg_write_Z_r3;
pol commit r3;
pol commit reg_write_X_r4;
pol commit reg_write_Y_r4;
pol commit reg_write_Z_r4;
pol commit r4;
pol commit reg_write_X_r5;
pol commit reg_write_Y_r5;
pol commit reg_write_Z_r5;
pol commit r5;
pol commit reg_write_X_r6;
pol commit reg_write_Y_r6;
pol commit reg_write_Z_r6;
pol commit r6;
pol commit reg_write_X_r7;
pol commit reg_write_Y_r7;
pol commit reg_write_Z_r7;
pol commit r7;
pol commit reg_write_X_r8;
pol commit reg_write_Y_r8;
pol commit reg_write_Z_r8;
pol commit r8;
pol commit reg_write_X_r9;
pol commit reg_write_Y_r9;
pol commit reg_write_Z_r9;
pol commit r9;
pol commit reg_write_X_r10;
pol commit reg_write_Y_r10;
pol commit reg_write_Z_r10;
pol commit r10;
pol commit reg_write_X_r11;
pol commit reg_write_Y_r11;
pol commit reg_write_Z_r11;
pol commit r11;
pol commit instr_store;
instr_store { addr, STEP, X } is m_is_write { m_addr, m_step, m_value };
pol commit instr_load;
instr_load { addr, STEP, X } is m_is_read { m_addr, m_step, m_value };
pol commit instr_add;
(instr_add * (X - (Y + Z))) = 0;
pol commit instr_sub;
(instr_sub * (X - (Y - Z))) = 0;
pol commit instr_eq;
(instr_eq * (Y - XIsZero)) = 0;
pol commit instr_mul;
(instr_mul * (X - (Y * Z))) = 0;
pol commit instr_mov;
(instr_mov * (X - Y)) = 0;
pol commit instr_call;
pol commit instr_call_param_l;
pol commit instr_ret;
pol commit instr_jump;
pol commit instr_jump_param_l;
pol commit instr_jumpi;
pol commit instr_jumpi_param_l;
pol instr_jumpi_pc_update = ((1 - XIsZero) * instr_jumpi_param_l);
pol instr_jumpi_pc_update_1 = (XIsZero * (pc + 1));
pol commit instr_jumpni;
pol commit instr_jumpni_param_l;
pol instr_jumpni_pc_update = (XIsZero * instr_jumpni_param_l);
pol instr_jumpni_pc_update_1 = ((1 - XIsZero) * (pc + 1));
pol commit instr__jump_to_operation;
pol commit instr__reset;
pol commit instr__loop;
pol commit instr_return;
pol commit X_const;
pol commit X_read_free;
pol commit read_X_addr;
pol commit read_X_jump_ptr;
pol commit read_X_r0;
pol commit read_X_r1;
pol commit read_X_r10;
pol commit read_X_r11;
pol commit read_X_r2;
pol commit read_X_r3;
pol commit read_X_r4;
pol commit read_X_r5;
pol commit read_X_r6;
pol commit read_X_r7;
pol commit read_X_r8;
pol commit read_X_r9;
pol commit read_X_tmp;
pol commit read_X_pc;
X = ((((((((((((((((((read_X_addr * addr) + (read_X_jump_ptr * jump_ptr)) + (read_X_r0 * r0)) + (read_X_r1 * r1)) + (read_X_r10 * r10)) + (read_X_r11 * r11)) + (read_X_r2 * r2)) + (read_X_r3 * r3)) + (read_X_r4 * r4)) + (read_X_r5 * r5)) + (read_X_r6 * r6)) + (read_X_r7 * r7)) + (read_X_r8 * r8)) + (read_X_r9 * r9)) + (read_X_tmp * tmp)) + (read_X_pc * pc)) + X_const) + (X_read_free * X_free_value));
pol commit Y_const;
pol commit Y_read_free;
pol commit read_Y_addr;
pol commit read_Y_jump_ptr;
pol commit read_Y_r0;
pol commit read_Y_r1;
pol commit read_Y_r10;
pol commit read_Y_r11;
pol commit read_Y_r2;
pol commit read_Y_r3;
pol commit read_Y_r4;
pol commit read_Y_r5;
pol commit read_Y_r6;
pol commit read_Y_r7;
pol commit read_Y_r8;
pol commit read_Y_r9;
pol commit read_Y_tmp;
pol commit read_Y_pc;
Y = ((((((((((((((((((read_Y_addr * addr) + (read_Y_jump_ptr * jump_ptr)) + (read_Y_r0 * r0)) + (read_Y_r1 * r1)) + (read_Y_r10 * r10)) + (read_Y_r11 * r11)) + (read_Y_r2 * r2)) + (read_Y_r3 * r3)) + (read_Y_r4 * r4)) + (read_Y_r5 * r5)) + (read_Y_r6 * r6)) + (read_Y_r7 * r7)) + (read_Y_r8 * r8)) + (read_Y_r9 * r9)) + (read_Y_tmp * tmp)) + (read_Y_pc * pc)) + Y_const) + (Y_read_free * Y_free_value));
pol commit Z_const;
pol commit Z_read_free;
pol commit read_Z_addr;
pol commit read_Z_jump_ptr;
pol commit read_Z_r0;
pol commit read_Z_r1;
pol commit read_Z_r10;
pol commit read_Z_r11;
pol commit read_Z_r2;
pol commit read_Z_r3;
pol commit read_Z_r4;
pol commit read_Z_r5;
pol commit read_Z_r6;
pol commit read_Z_r7;
pol commit read_Z_r8;
pol commit read_Z_r9;
pol commit read_Z_tmp;
pol commit read_Z_pc;
Z = ((((((((((((((((((read_Z_addr * addr) + (read_Z_jump_ptr * jump_ptr)) + (read_Z_r0 * r0)) + (read_Z_r1 * r1)) + (read_Z_r10 * r10)) + (read_Z_r11 * r11)) + (read_Z_r2 * r2)) + (read_Z_r3 * r3)) + (read_Z_r4 * r4)) + (read_Z_r5 * r5)) + (read_Z_r6 * r6)) + (read_Z_r7 * r7)) + (read_Z_r8 * r8)) + (read_Z_r9 * r9)) + (read_Z_tmp * tmp)) + (read_Z_pc * pc)) + Z_const) + (Z_read_free * Z_free_value));
pol constant first_step = [1] + [0]*;
addr' = (((((reg_write_X_addr * X) + (reg_write_Y_addr * Y)) + (reg_write_Z_addr * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_addr + reg_write_Y_addr) + reg_write_Z_addr) + instr__reset)) * addr));
jump_ptr' = ((((((reg_write_X_jump_ptr * X) + (reg_write_Y_jump_ptr * Y)) + (reg_write_Z_jump_ptr * Z)) + (instr_call * (pc + 1))) + (instr__reset * 0)) + ((1 - ((((reg_write_X_jump_ptr + reg_write_Y_jump_ptr) + reg_write_Z_jump_ptr) + instr_call) + instr__reset)) * jump_ptr));
pol pc_update = (((((((((instr_call * instr_call_param_l) + (instr_ret * jump_ptr)) + (instr_jump * instr_jump_param_l)) + (instr_jumpi * (instr_jumpi_pc_update + instr_jumpi_pc_update_1))) + (instr_jumpni * (instr_jumpni_pc_update + instr_jumpni_pc_update_1))) + (instr__jump_to_operation * _operation_id)) + (instr__loop * pc)) + (instr_return * 0)) + ((1 - (((((((instr_call + instr_ret) + instr_jump) + instr_jumpi) + instr_jumpni) + instr__jump_to_operation) + instr__loop) + instr_return)) * (pc + 1)));
pc' = ((1 - first_step') * pc_update);
r0' = (((((reg_write_X_r0 * X) + (reg_write_Y_r0 * Y)) + (reg_write_Z_r0 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r0 + reg_write_Y_r0) + reg_write_Z_r0) + instr__reset)) * r0));
r1' = (((((reg_write_X_r1 * X) + (reg_write_Y_r1 * Y)) + (reg_write_Z_r1 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r1 + reg_write_Y_r1) + reg_write_Z_r1) + instr__reset)) * r1));
r10' = (((((reg_write_X_r10 * X) + (reg_write_Y_r10 * Y)) + (reg_write_Z_r10 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r10 + reg_write_Y_r10) + reg_write_Z_r10) + instr__reset)) * r10));
r11' = (((((reg_write_X_r11 * X) + (reg_write_Y_r11 * Y)) + (reg_write_Z_r11 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r11 + reg_write_Y_r11) + reg_write_Z_r11) + instr__reset)) * r11));
r2' = (((((reg_write_X_r2 * X) + (reg_write_Y_r2 * Y)) + (reg_write_Z_r2 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r2 + reg_write_Y_r2) + reg_write_Z_r2) + instr__reset)) * r2));
r3' = (((((reg_write_X_r3 * X) + (reg_write_Y_r3 * Y)) + (reg_write_Z_r3 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r3 + reg_write_Y_r3) + reg_write_Z_r3) + instr__reset)) * r3));
r4' = (((((reg_write_X_r4 * X) + (reg_write_Y_r4 * Y)) + (reg_write_Z_r4 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r4 + reg_write_Y_r4) + reg_write_Z_r4) + instr__reset)) * r4));
r5' = (((((reg_write_X_r5 * X) + (reg_write_Y_r5 * Y)) + (reg_write_Z_r5 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r5 + reg_write_Y_r5) + reg_write_Z_r5) + instr__reset)) * r5));
r6' = (((((reg_write_X_r6 * X) + (reg_write_Y_r6 * Y)) + (reg_write_Z_r6 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r6 + reg_write_Y_r6) + reg_write_Z_r6) + instr__reset)) * r6));
r7' = (((((reg_write_X_r7 * X) + (reg_write_Y_r7 * Y)) + (reg_write_Z_r7 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r7 + reg_write_Y_r7) + reg_write_Z_r7) + instr__reset)) * r7));
r8' = (((((reg_write_X_r8 * X) + (reg_write_Y_r8 * Y)) + (reg_write_Z_r8 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r8 + reg_write_Y_r8) + reg_write_Z_r8) + instr__reset)) * r8));
r9' = (((((reg_write_X_r9 * X) + (reg_write_Y_r9 * Y)) + (reg_write_Z_r9 * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_r9 + reg_write_Y_r9) + reg_write_Z_r9) + instr__reset)) * r9));
tmp' = (((((reg_write_X_tmp * X) + (reg_write_Y_tmp * Y)) + (reg_write_Z_tmp * Z)) + (instr__reset * 0)) + ((1 - (((reg_write_X_tmp + reg_write_Y_tmp) + reg_write_Z_tmp) + instr__reset)) * tmp));
pol constant p_line = [0, 1, 2, 3, 4, 5, 6, 7, 8] + [8]*;
pol commit X_free_value(i) query match pc {  };
pol commit Y_free_value(i) query match pc {  };
pol commit Z_free_value(i) query match pc {  };
pol constant p_X_const = [0, 0, 0, 0, 0, 0, 3, 0, 0] + [0]*;
pol constant p_X_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Y_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Y_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Z_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_Z_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 0, 1] + [1]*;
pol constant p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_add = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_call = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
pol constant p_instr_call_param_l = [0, 0, 0, 0, 6, 0, 0, 0, 0] + [0]*;
pol constant p_instr_eq = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jump = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jump_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jumpi = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jumpi_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jumpni = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_jumpni_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_load = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_mov = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_mul = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_ret = [0, 0, 0, 0, 0, 0, 0, 1, 0] + [0]*;
pol constant p_instr_return = [0, 0, 0, 0, 0, 1, 0, 0, 0] + [0]*;
pol constant p_instr_store = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_instr_sub = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_X_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Y_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_read_Z_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r0 = [0, 0, 1, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r1 = [0, 0, 0, 1, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r3 = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
pol constant p_reg_write_X_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_X_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Y_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
pol constant p_reg_write_Z_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
{ pc, reg_write_X_jump_ptr, reg_write_Y_jump_ptr, reg_write_Z_jump_ptr, reg_write_X_addr, reg_write_Y_addr, reg_write_Z_addr, reg_write_X_tmp, reg_write_Y_tmp, reg_write_Z_tmp, reg_write_X_r0, reg_write_Y_r0, reg_write_Z_r0, reg_write_X_r1, reg_write_Y_r1, reg_write_Z_r1, reg_write_X_r2, reg_write_Y_r2, reg_write_Z_r2, reg_write_X_r3, reg_write_Y_r3, reg_write_Z_r3, reg_write_X_r4, reg_write_Y_r4, reg_write_Z_r4, reg_write_X_r5, reg_write_Y_r5, reg_write_Z_r5, reg_write_X_r6, reg_write_Y_r6, reg_write_Z_r6, reg_write_X_r7, reg_write_Y_r7, reg_write_Z_r7, reg_write_X_r8, reg_write_Y_r8, reg_write_Z_r8, reg_write_X_r9, reg_write_Y_r9, reg_write_Z_r9, reg_write_X_r10, reg_write_Y_r10, reg_write_Z_r10, reg_write_X_r11, reg_write_Y_r11, reg_write_Z_r11, instr_store, instr_load, instr_add, instr_sub, instr_eq, instr_mul, instr_mov, instr_call, instr_call_param_l, instr_ret, instr_jump, instr_jump_param_l, instr_jumpi, instr_jumpi_param_l, instr_jumpni, instr_jumpni_param_l, instr__jump_to_operation, instr__reset, instr__loop, instr_return, X_const, X_read_free, read_X_addr, read_X_jump_ptr, read_X_r0, read_X_r1, read_X_r10, read_X_r11, read_X_r2, read_X_r3, read_X_r4, read_X_r5, read_X_r6, read_X_r7, read_X_r8, read_X_r9, read_X_tmp, read_X_pc, Y_const, Y_read_free, read_Y_addr, read_Y_jump_ptr, read_Y_r0, read_Y_r1, read_Y_r10, read_Y_r11, read_Y_r2, read_Y_r3, read_Y_r4, read_Y_r5, read_Y_r6, read_Y_r7, read_Y_r8, read_Y_r9, read_Y_tmp, read_Y_pc, Z_const, Z_read_free, read_Z_addr, read_Z_jump_ptr, read_Z_r0, read_Z_r1, read_Z_r10, read_Z_r11, read_Z_r2, read_Z_r3, read_Z_r4, read_Z_r5, read_Z_r6, read_Z_r7, read_Z_r8, read_Z_r9, read_Z_tmp, read_Z_pc } in { p_line, p_reg_write_X_jump_ptr, p_reg_write_Y_jump_ptr, p_reg_write_Z_jump_ptr, p_reg_write_X_addr, p_reg_write_Y_addr, p_reg_write_Z_addr, p_reg_write_X_tmp, p_reg_write_Y_tmp, p_reg_write_Z_tmp, p_reg_write_X_r0, p_reg_write_Y_r0, p_reg_write_Z_r0, p_reg_write_X_r1, p_reg_write_Y_r1, p_reg_write_Z_r1, p_reg_write_X_r2, p_reg_write_Y_r2, p_reg_write_Z_r2, p_reg_write_X_r3, p_reg_write_Y_r3, p_reg_write_Z_r3, p_reg_write_X_r4, p_reg_write_Y_r4, p_reg_write_Z_r4, p_reg_write_X_r5, p_reg_write_Y_r5, p_reg_write_Z_r5, p_reg_write_X_r6, p_reg_write_Y_r6, p_reg_write_Z_r6, p_reg_write_X_r7, p_reg_write_Y_r7, p_reg_write_Z_r7, p_reg_write_X_r8, p_reg_write_Y_r8, p_reg_write_Z_r8, p_reg_write_X_r9, p_reg_write_Y_r9, p_reg_write_Z_r9, p_reg_write_X_r10, p_reg_write_Y_r10, p_reg_write_Z_r10, p_reg_write_X_r11, p_reg_write_Y_r11, p_reg_write_Z_r11, p_instr_store, p_instr_load, p_instr_add, p_instr_sub, p_instr_eq, p_instr_mul, p_instr_mov, p_instr_call, p_instr_call_param_l, p_instr_ret, p_instr_jump, p_instr_jump_param_l, p_instr_jumpi, p_instr_jumpi_param_l, p_instr_jumpni, p_instr_jumpni_param_l, p_instr__jump_to_operation, p_instr__reset, p_instr__loop, p_instr_return, p_X_const, p_X_read_free, p_read_X_addr, p_read_X_jump_ptr, p_read_X_r0, p_read_X_r1, p_read_X_r10, p_read_X_r11, p_read_X_r2, p_read_X_r3, p_read_X_r4, p_read_X_r5, p_read_X_r6, p_read_X_r7, p_read_X_r8, p_read_X_r9, p_read_X_tmp, p_read_X_pc, p_Y_const, p_Y_read_free, p_read_Y_addr, p_read_Y_jump_ptr, p_read_Y_r0, p_read_Y_r1, p_read_Y_r10, p_read_Y_r11, p_read_Y_r2, p_read_Y_r3, p_read_Y_r4, p_read_Y_r5, p_read_Y_r6, p_read_Y_r7, p_read_Y_r8, p_read_Y_r9, p_read_Y_tmp, p_read_Y_pc, p_Z_const, p_Z_read_free, p_read_Z_addr, p_read_Z_jump_ptr, p_read_Z_r0, p_read_Z_r1, p_read_Z_r10, p_read_Z_r11, p_read_Z_r2, p_read_Z_r3, p_read_Z_r4, p_read_Z_r5, p_read_Z_r6, p_read_Z_r7, p_read_Z_r8, p_read_Z_r9, p_read_Z_tmp, p_read_Z_pc };
pol constant _block_enforcer_last_step = [0]* + [1];
pol commit _operation_id_no_change;
_operation_id_no_change = ((1 - _block_enforcer_last_step) * (1 - instr_return));
(_operation_id_no_change * (_operation_id' - _operation_id)) = 0;
pol constant _linker_first_step = [1] + [0]*;
(_linker_first_step * (_operation_id - 2)) = 0;
