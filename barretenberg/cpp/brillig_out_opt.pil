namespace main(256);
    col witness XInv;
    col witness XIsZero;
    main.XIsZero = (1 - (main.X * main.XInv));
    (main.XIsZero * main.X) = 0;
    (main.XIsZero * (1 - main.XIsZero)) = 0;
    col witness m_addr;
    col witness m_step;
    col witness m_change;
    col witness m_value;
    col witness m_op;
    col witness m_is_write;
    col witness m_is_read;
    col fixed POSITIVE(i) { (i + 1) };
    col fixed FIRST = [1] + [0]*;
    col fixed LAST(i) { main.FIRST((i + 1)) };
    col fixed STEP(i) { i };
    (main.m_change * (1 - main.m_change)) = 0;
    ((main.m_addr' - main.m_addr) * (1 - main.m_change)) = 0;
    (1 - main.LAST) { ((main.m_change * (main.m_addr' - main.m_addr)) + ((1 - main.m_change) * (main.m_step' - main.m_step))) } in { main.POSITIVE };
    (main.m_op * (1 - main.m_op)) = 0;
    (main.m_is_write * (1 - main.m_is_write)) = 0;
    (main.m_is_read * (1 - main.m_is_read)) = 0;
    (main.m_is_write * (1 - main.m_op)) = 0;
    (main.m_is_read * (1 - main.m_op)) = 0;
    (main.m_is_read * main.m_is_write) = 0;
    (((1 - main.m_is_write') * (1 - main.m_change)) * (main.m_value' - main.m_value)) = 0;
    (((1 - main.m_is_write') * main.m_change) * main.m_value') = 0;
    col witness _operation_id;
    col witness _sigma;
    col fixed _romgen_first_step = [1] + [0]*;
    main._sigma' = ((1 - main._romgen_first_step') * (main._sigma + main.instr_return));
    (main._sigma * (main._operation_id - 8)) = 0;
    col witness pc;
    col witness X;
    col witness Y;
    col witness Z;
    col witness reg_write_X_jump_ptr;
    col witness reg_write_Y_jump_ptr;
    col witness reg_write_Z_jump_ptr;
    col witness jump_ptr;
    col witness reg_write_X_addr;
    col witness reg_write_Y_addr;
    col witness reg_write_Z_addr;
    col witness addr;
    col witness reg_write_X_tmp;
    col witness reg_write_Y_tmp;
    col witness reg_write_Z_tmp;
    col witness tmp;
    col witness reg_write_X_r0;
    col witness reg_write_Y_r0;
    col witness reg_write_Z_r0;
    col witness r0;
    col witness reg_write_X_r1;
    col witness reg_write_Y_r1;
    col witness reg_write_Z_r1;
    col witness r1;
    col witness reg_write_X_r2;
    col witness reg_write_Y_r2;
    col witness reg_write_Z_r2;
    col witness r2;
    col witness reg_write_X_r3;
    col witness reg_write_Y_r3;
    col witness reg_write_Z_r3;
    col witness r3;
    col witness reg_write_X_r4;
    col witness reg_write_Y_r4;
    col witness reg_write_Z_r4;
    col witness r4;
    col witness reg_write_X_r5;
    col witness reg_write_Y_r5;
    col witness reg_write_Z_r5;
    col witness r5;
    col witness reg_write_X_r6;
    col witness reg_write_Y_r6;
    col witness reg_write_Z_r6;
    col witness r6;
    col witness reg_write_X_r7;
    col witness reg_write_Y_r7;
    col witness reg_write_Z_r7;
    col witness r7;
    col witness reg_write_X_r8;
    col witness reg_write_Y_r8;
    col witness reg_write_Z_r8;
    col witness r8;
    col witness reg_write_X_r9;
    col witness reg_write_Y_r9;
    col witness reg_write_Z_r9;
    col witness r9;
    col witness reg_write_X_r10;
    col witness reg_write_Y_r10;
    col witness reg_write_Z_r10;
    col witness r10;
    col witness reg_write_X_r11;
    col witness reg_write_Y_r11;
    col witness reg_write_Z_r11;
    col witness r11;
    col witness instr_store;
    main.instr_store { main.addr, main.STEP, main.X } is main.m_is_write { main.m_addr, main.m_step, main.m_value };
    col witness instr_load;
    main.instr_load { main.addr, main.STEP, main.X } is main.m_is_read { main.m_addr, main.m_step, main.m_value };
    col witness instr_add;
    (main.instr_add * (main.X - (main.Y + main.Z))) = 0;
    col witness instr_sub;
    (main.instr_sub * (main.X - (main.Y - main.Z))) = 0;
    col witness instr_eq;
    (main.instr_eq * (main.Y - main.XIsZero)) = 0;
    col witness instr_mul;
    (main.instr_mul * (main.X - (main.Y * main.Z))) = 0;
    col witness instr_mov;
    (main.instr_mov * (main.X - main.Y)) = 0;
    col witness instr_call;
    col witness instr_call_param_l;
    col witness instr_ret;
    col witness instr_jump;
    col witness instr_jump_param_l;
    col witness instr_jumpi;
    col witness instr_jumpi_param_l;
    col instr_jumpi_pc_update = ((1 - main.XIsZero) * main.instr_jumpi_param_l);
    col instr_jumpi_pc_update_1 = (main.XIsZero * (main.pc + 1));
    col witness instr_jumpni;
    col witness instr_jumpni_param_l;
    col instr_jumpni_pc_update = (main.XIsZero * main.instr_jumpni_param_l);
    col instr_jumpni_pc_update_1 = ((1 - main.XIsZero) * (main.pc + 1));
    col witness instr__jump_to_operation;
    col witness instr__reset;
    col witness instr__loop;
    col witness instr_return;
    col witness X_const;
    col witness X_read_free;
    col witness read_X_addr;
    col witness read_X_jump_ptr;
    col witness read_X_r0;
    col witness read_X_r1;
    col witness read_X_r10;
    col witness read_X_r11;
    col witness read_X_r2;
    col witness read_X_r3;
    col witness read_X_r4;
    col witness read_X_r5;
    col witness read_X_r6;
    col witness read_X_r7;
    col witness read_X_r8;
    col witness read_X_r9;
    col witness read_X_tmp;
    col witness read_X_pc;
    main.X = ((((((((((((((((((main.read_X_addr * main.addr) + (main.read_X_jump_ptr * main.jump_ptr)) + (main.read_X_r0 * main.r0)) + (main.read_X_r1 * main.r1)) + (main.read_X_r10 * main.r10)) + (main.read_X_r11 * main.r11)) + (main.read_X_r2 * main.r2)) + (main.read_X_r3 * main.r3)) + (main.read_X_r4 * main.r4)) + (main.read_X_r5 * main.r5)) + (main.read_X_r6 * main.r6)) + (main.read_X_r7 * main.r7)) + (main.read_X_r8 * main.r8)) + (main.read_X_r9 * main.r9)) + (main.read_X_tmp * main.tmp)) + (main.read_X_pc * main.pc)) + main.X_const) + (main.X_read_free * main.X_free_value));
    col witness Y_const;
    col witness Y_read_free;
    col witness read_Y_addr;
    col witness read_Y_jump_ptr;
    col witness read_Y_r0;
    col witness read_Y_r1;
    col witness read_Y_r10;
    col witness read_Y_r11;
    col witness read_Y_r2;
    col witness read_Y_r3;
    col witness read_Y_r4;
    col witness read_Y_r5;
    col witness read_Y_r6;
    col witness read_Y_r7;
    col witness read_Y_r8;
    col witness read_Y_r9;
    col witness read_Y_tmp;
    col witness read_Y_pc;
    main.Y = ((((((((((((((((((main.read_Y_addr * main.addr) + (main.read_Y_jump_ptr * main.jump_ptr)) + (main.read_Y_r0 * main.r0)) + (main.read_Y_r1 * main.r1)) + (main.read_Y_r10 * main.r10)) + (main.read_Y_r11 * main.r11)) + (main.read_Y_r2 * main.r2)) + (main.read_Y_r3 * main.r3)) + (main.read_Y_r4 * main.r4)) + (main.read_Y_r5 * main.r5)) + (main.read_Y_r6 * main.r6)) + (main.read_Y_r7 * main.r7)) + (main.read_Y_r8 * main.r8)) + (main.read_Y_r9 * main.r9)) + (main.read_Y_tmp * main.tmp)) + (main.read_Y_pc * main.pc)) + main.Y_const) + (main.Y_read_free * main.Y_free_value));
    col witness Z_const;
    col witness Z_read_free;
    col witness read_Z_addr;
    col witness read_Z_jump_ptr;
    col witness read_Z_r0;
    col witness read_Z_r1;
    col witness read_Z_r10;
    col witness read_Z_r11;
    col witness read_Z_r2;
    col witness read_Z_r3;
    col witness read_Z_r4;
    col witness read_Z_r5;
    col witness read_Z_r6;
    col witness read_Z_r7;
    col witness read_Z_r8;
    col witness read_Z_r9;
    col witness read_Z_tmp;
    col witness read_Z_pc;
    main.Z = ((((((((((((((((((main.read_Z_addr * main.addr) + (main.read_Z_jump_ptr * main.jump_ptr)) + (main.read_Z_r0 * main.r0)) + (main.read_Z_r1 * main.r1)) + (main.read_Z_r10 * main.r10)) + (main.read_Z_r11 * main.r11)) + (main.read_Z_r2 * main.r2)) + (main.read_Z_r3 * main.r3)) + (main.read_Z_r4 * main.r4)) + (main.read_Z_r5 * main.r5)) + (main.read_Z_r6 * main.r6)) + (main.read_Z_r7 * main.r7)) + (main.read_Z_r8 * main.r8)) + (main.read_Z_r9 * main.r9)) + (main.read_Z_tmp * main.tmp)) + (main.read_Z_pc * main.pc)) + main.Z_const) + (main.Z_read_free * main.Z_free_value));
    col fixed first_step = [1] + [0]*;
    main.addr' = (((((main.reg_write_X_addr * main.X) + (main.reg_write_Y_addr * main.Y)) + (main.reg_write_Z_addr * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_addr + main.reg_write_Y_addr) + main.reg_write_Z_addr) + main.instr__reset)) * main.addr));
    main.jump_ptr' = ((((((main.reg_write_X_jump_ptr * main.X) + (main.reg_write_Y_jump_ptr * main.Y)) + (main.reg_write_Z_jump_ptr * main.Z)) + (main.instr_call * (main.pc + 1))) + (main.instr__reset * 0)) + ((1 - ((((main.reg_write_X_jump_ptr + main.reg_write_Y_jump_ptr) + main.reg_write_Z_jump_ptr) + main.instr_call) + main.instr__reset)) * main.jump_ptr));
    col pc_update = (((((((((main.instr_call * main.instr_call_param_l) + (main.instr_ret * main.jump_ptr)) + (main.instr_jump * main.instr_jump_param_l)) + (main.instr_jumpi * (main.instr_jumpi_pc_update + main.instr_jumpi_pc_update_1))) + (main.instr_jumpni * (main.instr_jumpni_pc_update + main.instr_jumpni_pc_update_1))) + (main.instr__jump_to_operation * main._operation_id)) + (main.instr__loop * main.pc)) + (main.instr_return * 0)) + ((1 - (((((((main.instr_call + main.instr_ret) + main.instr_jump) + main.instr_jumpi) + main.instr_jumpni) + main.instr__jump_to_operation) + main.instr__loop) + main.instr_return)) * (main.pc + 1)));
    main.pc' = ((1 - main.first_step') * main.pc_update);
    main.r0' = (((((main.reg_write_X_r0 * main.X) + (main.reg_write_Y_r0 * main.Y)) + (main.reg_write_Z_r0 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r0 + main.reg_write_Y_r0) + main.reg_write_Z_r0) + main.instr__reset)) * main.r0));
    main.r1' = (((((main.reg_write_X_r1 * main.X) + (main.reg_write_Y_r1 * main.Y)) + (main.reg_write_Z_r1 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r1 + main.reg_write_Y_r1) + main.reg_write_Z_r1) + main.instr__reset)) * main.r1));
    main.r10' = (((((main.reg_write_X_r10 * main.X) + (main.reg_write_Y_r10 * main.Y)) + (main.reg_write_Z_r10 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r10 + main.reg_write_Y_r10) + main.reg_write_Z_r10) + main.instr__reset)) * main.r10));
    main.r11' = (((((main.reg_write_X_r11 * main.X) + (main.reg_write_Y_r11 * main.Y)) + (main.reg_write_Z_r11 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r11 + main.reg_write_Y_r11) + main.reg_write_Z_r11) + main.instr__reset)) * main.r11));
    main.r2' = (((((main.reg_write_X_r2 * main.X) + (main.reg_write_Y_r2 * main.Y)) + (main.reg_write_Z_r2 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r2 + main.reg_write_Y_r2) + main.reg_write_Z_r2) + main.instr__reset)) * main.r2));
    main.r3' = (((((main.reg_write_X_r3 * main.X) + (main.reg_write_Y_r3 * main.Y)) + (main.reg_write_Z_r3 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r3 + main.reg_write_Y_r3) + main.reg_write_Z_r3) + main.instr__reset)) * main.r3));
    main.r4' = (((((main.reg_write_X_r4 * main.X) + (main.reg_write_Y_r4 * main.Y)) + (main.reg_write_Z_r4 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r4 + main.reg_write_Y_r4) + main.reg_write_Z_r4) + main.instr__reset)) * main.r4));
    main.r5' = (((((main.reg_write_X_r5 * main.X) + (main.reg_write_Y_r5 * main.Y)) + (main.reg_write_Z_r5 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r5 + main.reg_write_Y_r5) + main.reg_write_Z_r5) + main.instr__reset)) * main.r5));
    main.r6' = (((((main.reg_write_X_r6 * main.X) + (main.reg_write_Y_r6 * main.Y)) + (main.reg_write_Z_r6 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r6 + main.reg_write_Y_r6) + main.reg_write_Z_r6) + main.instr__reset)) * main.r6));
    main.r7' = (((((main.reg_write_X_r7 * main.X) + (main.reg_write_Y_r7 * main.Y)) + (main.reg_write_Z_r7 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r7 + main.reg_write_Y_r7) + main.reg_write_Z_r7) + main.instr__reset)) * main.r7));
    main.r8' = (((((main.reg_write_X_r8 * main.X) + (main.reg_write_Y_r8 * main.Y)) + (main.reg_write_Z_r8 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r8 + main.reg_write_Y_r8) + main.reg_write_Z_r8) + main.instr__reset)) * main.r8));
    main.r9' = (((((main.reg_write_X_r9 * main.X) + (main.reg_write_Y_r9 * main.Y)) + (main.reg_write_Z_r9 * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_r9 + main.reg_write_Y_r9) + main.reg_write_Z_r9) + main.instr__reset)) * main.r9));
    main.tmp' = (((((main.reg_write_X_tmp * main.X) + (main.reg_write_Y_tmp * main.Y)) + (main.reg_write_Z_tmp * main.Z)) + (main.instr__reset * 0)) + ((1 - (((main.reg_write_X_tmp + main.reg_write_Y_tmp) + main.reg_write_Z_tmp) + main.instr__reset)) * main.tmp));
    col fixed p_line = [0, 1, 2, 3, 4, 5, 6, 7, 8] + [8]*;
    col witness X_free_value(i) query match main.pc {  };
    col witness Y_free_value(i) query match main.pc {  };
    col witness Z_free_value(i) query match main.pc {  };
    col fixed p_X_const = [0, 0, 0, 0, 0, 0, 3, 0, 0] + [0]*;
    col fixed p_X_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Y_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Y_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Z_const = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_Z_read_free = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__jump_to_operation = [0, 1, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr__loop = [0, 0, 0, 0, 0, 0, 0, 0, 1] + [1]*;
    col fixed p_instr__reset = [1, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_add = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_call = [0, 0, 0, 0, 1, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_call_param_l = [0, 0, 0, 0, 6, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_eq = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jump = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jump_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jumpi = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jumpi_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jumpni = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_jumpni_param_l = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_load = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_mov = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_mul = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_ret = [0, 0, 0, 0, 0, 0, 0, 1, 0] + [0]*;
    col fixed p_instr_return = [0, 0, 0, 0, 0, 1, 0, 0, 0] + [0]*;
    col fixed p_instr_store = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_instr_sub = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_X_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Y_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_pc = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_read_Z_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r0 = [0, 0, 1, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r1 = [0, 0, 0, 1, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r3 = [0, 0, 0, 0, 0, 0, 1, 0, 0] + [0]*;
    col fixed p_reg_write_X_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_X_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Y_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_addr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_jump_ptr = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r0 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r1 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r10 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r11 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r2 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r3 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r4 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r5 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r6 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r7 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r8 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_r9 = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    col fixed p_reg_write_Z_tmp = [0, 0, 0, 0, 0, 0, 0, 0, 0] + [0]*;
    { main.pc, main.reg_write_X_jump_ptr, main.reg_write_Y_jump_ptr, main.reg_write_Z_jump_ptr, main.reg_write_X_addr, main.reg_write_Y_addr, main.reg_write_Z_addr, main.reg_write_X_tmp, main.reg_write_Y_tmp, main.reg_write_Z_tmp, main.reg_write_X_r0, main.reg_write_Y_r0, main.reg_write_Z_r0, main.reg_write_X_r1, main.reg_write_Y_r1, main.reg_write_Z_r1, main.reg_write_X_r2, main.reg_write_Y_r2, main.reg_write_Z_r2, main.reg_write_X_r3, main.reg_write_Y_r3, main.reg_write_Z_r3, main.reg_write_X_r4, main.reg_write_Y_r4, main.reg_write_Z_r4, main.reg_write_X_r5, main.reg_write_Y_r5, main.reg_write_Z_r5, main.reg_write_X_r6, main.reg_write_Y_r6, main.reg_write_Z_r6, main.reg_write_X_r7, main.reg_write_Y_r7, main.reg_write_Z_r7, main.reg_write_X_r8, main.reg_write_Y_r8, main.reg_write_Z_r8, main.reg_write_X_r9, main.reg_write_Y_r9, main.reg_write_Z_r9, main.reg_write_X_r10, main.reg_write_Y_r10, main.reg_write_Z_r10, main.reg_write_X_r11, main.reg_write_Y_r11, main.reg_write_Z_r11, main.instr_store, main.instr_load, main.instr_add, main.instr_sub, main.instr_eq, main.instr_mul, main.instr_mov, main.instr_call, main.instr_call_param_l, main.instr_ret, main.instr_jump, main.instr_jump_param_l, main.instr_jumpi, main.instr_jumpi_param_l, main.instr_jumpni, main.instr_jumpni_param_l, main.instr__jump_to_operation, main.instr__reset, main.instr__loop, main.instr_return, main.X_const, main.X_read_free, main.read_X_addr, main.read_X_jump_ptr, main.read_X_r0, main.read_X_r1, main.read_X_r10, main.read_X_r11, main.read_X_r2, main.read_X_r3, main.read_X_r4, main.read_X_r5, main.read_X_r6, main.read_X_r7, main.read_X_r8, main.read_X_r9, main.read_X_tmp, main.read_X_pc, main.Y_const, main.Y_read_free, main.read_Y_addr, main.read_Y_jump_ptr, main.read_Y_r0, main.read_Y_r1, main.read_Y_r10, main.read_Y_r11, main.read_Y_r2, main.read_Y_r3, main.read_Y_r4, main.read_Y_r5, main.read_Y_r6, main.read_Y_r7, main.read_Y_r8, main.read_Y_r9, main.read_Y_tmp, main.read_Y_pc, main.Z_const, main.Z_read_free, main.read_Z_addr, main.read_Z_jump_ptr, main.read_Z_r0, main.read_Z_r1, main.read_Z_r10, main.read_Z_r11, main.read_Z_r2, main.read_Z_r3, main.read_Z_r4, main.read_Z_r5, main.read_Z_r6, main.read_Z_r7, main.read_Z_r8, main.read_Z_r9, main.read_Z_tmp, main.read_Z_pc } in { main.p_line, main.p_reg_write_X_jump_ptr, main.p_reg_write_Y_jump_ptr, main.p_reg_write_Z_jump_ptr, main.p_reg_write_X_addr, main.p_reg_write_Y_addr, main.p_reg_write_Z_addr, main.p_reg_write_X_tmp, main.p_reg_write_Y_tmp, main.p_reg_write_Z_tmp, main.p_reg_write_X_r0, main.p_reg_write_Y_r0, main.p_reg_write_Z_r0, main.p_reg_write_X_r1, main.p_reg_write_Y_r1, main.p_reg_write_Z_r1, main.p_reg_write_X_r2, main.p_reg_write_Y_r2, main.p_reg_write_Z_r2, main.p_reg_write_X_r3, main.p_reg_write_Y_r3, main.p_reg_write_Z_r3, main.p_reg_write_X_r4, main.p_reg_write_Y_r4, main.p_reg_write_Z_r4, main.p_reg_write_X_r5, main.p_reg_write_Y_r5, main.p_reg_write_Z_r5, main.p_reg_write_X_r6, main.p_reg_write_Y_r6, main.p_reg_write_Z_r6, main.p_reg_write_X_r7, main.p_reg_write_Y_r7, main.p_reg_write_Z_r7, main.p_reg_write_X_r8, main.p_reg_write_Y_r8, main.p_reg_write_Z_r8, main.p_reg_write_X_r9, main.p_reg_write_Y_r9, main.p_reg_write_Z_r9, main.p_reg_write_X_r10, main.p_reg_write_Y_r10, main.p_reg_write_Z_r10, main.p_reg_write_X_r11, main.p_reg_write_Y_r11, main.p_reg_write_Z_r11, main.p_instr_store, main.p_instr_load, main.p_instr_add, main.p_instr_sub, main.p_instr_eq, main.p_instr_mul, main.p_instr_mov, main.p_instr_call, main.p_instr_call_param_l, main.p_instr_ret, main.p_instr_jump, main.p_instr_jump_param_l, main.p_instr_jumpi, main.p_instr_jumpi_param_l, main.p_instr_jumpni, main.p_instr_jumpni_param_l, main.p_instr__jump_to_operation, main.p_instr__reset, main.p_instr__loop, main.p_instr_return, main.p_X_const, main.p_X_read_free, main.p_read_X_addr, main.p_read_X_jump_ptr, main.p_read_X_r0, main.p_read_X_r1, main.p_read_X_r10, main.p_read_X_r11, main.p_read_X_r2, main.p_read_X_r3, main.p_read_X_r4, main.p_read_X_r5, main.p_read_X_r6, main.p_read_X_r7, main.p_read_X_r8, main.p_read_X_r9, main.p_read_X_tmp, main.p_read_X_pc, main.p_Y_const, main.p_Y_read_free, main.p_read_Y_addr, main.p_read_Y_jump_ptr, main.p_read_Y_r0, main.p_read_Y_r1, main.p_read_Y_r10, main.p_read_Y_r11, main.p_read_Y_r2, main.p_read_Y_r3, main.p_read_Y_r4, main.p_read_Y_r5, main.p_read_Y_r6, main.p_read_Y_r7, main.p_read_Y_r8, main.p_read_Y_r9, main.p_read_Y_tmp, main.p_read_Y_pc, main.p_Z_const, main.p_Z_read_free, main.p_read_Z_addr, main.p_read_Z_jump_ptr, main.p_read_Z_r0, main.p_read_Z_r1, main.p_read_Z_r10, main.p_read_Z_r11, main.p_read_Z_r2, main.p_read_Z_r3, main.p_read_Z_r4, main.p_read_Z_r5, main.p_read_Z_r6, main.p_read_Z_r7, main.p_read_Z_r8, main.p_read_Z_r9, main.p_read_Z_tmp, main.p_read_Z_pc };
    col fixed _block_enforcer_last_step = [0]* + [1];
    col witness _operation_id_no_change;
    main._operation_id_no_change = ((1 - main._block_enforcer_last_step) * (1 - main.instr_return));
    (main._operation_id_no_change * (main._operation_id' - main._operation_id)) = 0;
    col fixed _linker_first_step = [1] + [0]*;
    (main._linker_first_step * (main._operation_id - 2)) = 0;
